# AUTOGENERATED! DO NOT EDIT! File to edit: ../../Notebooks/01_datasets/01_05_bapps.ipynb.

# %% auto 0
__all__ = ['BAPPS']

# %% ../../Notebooks/01_datasets/01_05_bapps.ipynb 3
from pathlib import Path
from typing import List

import pandas as pd
import tensorflow as tf
import cv2

# %% ../../Notebooks/01_datasets/01_05_bapps.ipynb 5
class BAPPS():
    """Builder for the BAPPS dataset"""

    def __init__(self,
                 path, # Path to the root directory of the dataset.
                 num_parallel_calls: int = tf.data.AUTOTUNE, # Number of parallel calls when loading the images.
                 ):
        self.path_root = Path(path) if isinstance(path, str) else path
        self.path_csv = self.path_root/"data_bapps_extra.csv"
        self.data = self.load_data(self.path_csv)
        self.paths_ref = str(self.path_root) + "/" + self.data.Reference
        self.paths_dist_0 = str(self.path_root) + "/" + self.data.Image_0
        self.paths_dist_1 = str(self.path_root) + "/" + self.data.Image_1
        self.num_parallel_calls = num_parallel_calls

    @property
    def dataset(self):
        """tf.data.Dataset object built from the BAPPS dataset."""
        return tf.data.Dataset.from_tensor_slices((self.paths_ref, self.paths_dist_0, self.paths_dist_1, self.data.Label))\
                              .map(self.preprocess, num_parallel_calls=self.num_parallel_calls)

    @staticmethod
    def preprocess(path_ref,
                   path_dist_0,
                   path_dist_1,
                   label,
                   ):
        img_ref = tf.io.read_file(path_ref)
        img_dist_0 = tf.io.read_file(path_dist_0)
        img_dist_1 = tf.io.read_file(path_dist_1)

        img_ref = tf.image.decode_png(img_ref, channels=3)
        img_dist_0 = tf.image.decode_png(img_dist_0, channels=3)
        img_dist_1 = tf.image.decode_png(img_dist_1, channels=3)

        img_ref = tf.image.convert_image_dtype(img_ref, dtype=tf.float32)
        img_dist_0 = tf.image.convert_image_dtype(img_dist_0, dtype=tf.float32)
        img_dist_1 = tf.image.convert_image_dtype(img_dist_1, dtype=tf.float32)

        img_ref = tf.image.resize(img_ref, size=(252,252))
        img_dist_0 = tf.image.resize(img_dist_0, size=(252,252))
        img_dist_1 = tf.image.resize(img_dist_1, size=(252,252))

        return img_ref, img_dist_0, img_dist_1, label

    def load_data(self,
                  path,
                  ):
        data = pd.read_csv(self.path_csv)
        return data
